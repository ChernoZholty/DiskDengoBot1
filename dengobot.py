import discord
from discord.ext import commands
import logging
from dotenv import load_dotenv
from datetime import datetime
import os
import json

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# --- ID –†–û–õ–ò + –ö–ê–ù–ê–õ–û–í ---
ACTIVE_ROLE_ID = 1407089794240090263
LOG_CHANNEL_ID = 1407081468525805748        # –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)
COMMAND_CHANNEL_ID = 1407081468525805748   # –∫–∞–Ω–∞–ª, –≥–¥–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å /give mone
DB_CHANNEL_ID = 1407213722824343602  # —Å–æ–∑–¥–∞—ë—à—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è "–±–∞–∑—ã"

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
intents.voice_states = True

bot = commands.Bot(command_prefix="*", intents=intents)

voice_times = {}   # {member_id: datetime}
balances = {}      # {member_id: int}
db_messages = {}     # {member_id: message_id} ‚Äî –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º

# –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –∑–∞ –º–∏–Ω—É—Ç—É
MONEY_PER_MINUTE = 1

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")


# ==================== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô (–æ–¥–Ω–æ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ) ====================

async def load_database():
    """–ù–∞—Ö–æ–¥–∏—Ç/—Å–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç balances."""
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return

    messages = [m async for m in db_channel.history(limit=None, oldest_first=True)]
    last_valid_msg = None
    last_valid_data = None
    to_delete = []

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ-—Å–ª–æ–≤–∞—Ä—å, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–¥–∞–ª—è–µ–º
    for m in messages:
        try:
            data = json.loads(m.content)
            if isinstance(data, dict):
                if last_valid_msg:
                    to_delete.append(last_valid_msg)  # —Å—Ç–∞—Ä–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —É–¥–∞–ª–∏–º, –æ—Å—Ç–∞–≤–∏–º –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ
                last_valid_msg = m
                last_valid_data = data
            else:
                to_delete.append(m)
        except json.JSONDecodeError:
            to_delete.append(m)

    # –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä/–¥—É–±–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    for m in to_delete:
        try:
            await m.delete()
        except Exception:
            pass

    if last_valid_msg is not None:
        balances = {int(k): int(v) for k, v in last_valid_data.items()}
        db_message = last_valid_msg
        logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(balances)}")
        return

    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø—É—Å—Ç–æ–µ
    new_msg = await db_channel.send(json.dumps({}))
    db_message = new_msg
    balances = {}
    logging.info("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã.")


async def save_database():
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞—Ä—ë–º balances."""
    global db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return

    if not db_message:
        await load_database()
        if not db_message:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É.")
            return

    # –∫–ª—é—á–∏ –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏
    payload = {str(k): int(v) for k, v in balances.items()}

    try:
        await db_message.edit(content=json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except discord.NotFound:
        # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏–ª–∏ –≤—Ä—É—á–Ω—É—é ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
        db_message = await db_channel.send(json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ).")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É: {e}")


async def change_balance(member: discord.Member, amount: int):
    """–ú–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å (amount –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º). –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω—É—Å–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É."""
    old_balance = balances.get(member.id, 0)
    new_balance = old_balance + amount
    if new_balance < 0:
        return False, old_balance

    balances[member.id] = new_balance
    await save_database()
    return True, new_balance


# ==================== –°–û–ë–´–¢–ò–Ø ====================

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    await load_database()


@bot.event
async def on_voice_state_update(member, before, after):
    role = member.guild.get_role(ACTIVE_ROLE_ID)
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    command_channel = bot.get_channel(COMMAND_CHANNEL_ID)

    # –í—Ö–æ–¥ –≤ –≥–æ–ª–æ—Å
    if before.channel is None and after.channel is not None:
        if role and role not in member.roles:
            try:
                await member.add_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å.")
        voice_times[member.id] = datetime.now()

        if log_channel:
            await log_channel.send(f"‚úÖ {member} –∑–∞—à—ë–ª –≤ {after.channel}, —Ä–æ–ª—å –≤—ã–¥–∞–Ω–∞.")
        if command_channel:
            await command_channel.send(f"üéß {member.mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {after.channel.mention}!")

    # –í—ã—Ö–æ–¥ –∏–∑ –≥–æ–ª–æ—Å–∞
    if before.channel is not None and after.channel is None:
        if role and role in member.roles:
            try:
                await member.remove_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ —Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å.")

        if member.id in voice_times:
            join_time = voice_times.pop(member.id)
            minutes = int((datetime.now() - join_time).total_seconds() // 60)

            if minutes > 0:
                money = minutes * MONEY_PER_MINUTE
                success, total_balance = await change_balance(member, money)

                if success and command_channel:
                    await command_channel.send(
                        f"üí∞ {member.mention}, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{money}** –º–æ–Ω–µ—Ç "
                        f"(–∑–∞ {minutes} –º–∏–Ω). –ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
                if log_channel:
                    await log_channel.send(
                        f"üìà –ù–∞—á–∏—Å–ª–µ–Ω–æ {minutes}√ó{MONEY_PER_MINUTE} = **{money}** –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}. "
                        f"–ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
            else:
                if command_channel:
                    await command_channel.send(
                        f"‚ö†Ô∏è {member.mention}, –±—ã–ª –≤ –≤–æ–π—Å–µ <1 –º–∏–Ω. –ú–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã."
                    )
                if log_channel:
                    await log_channel.send(
                        f"‚ÑπÔ∏è {member} –≤—ã—à–µ–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (<1 –º–∏–Ω—É—Ç—ã). –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ—Ç."
                    )


# ==================== –ö–û–ú–ê–ù–î–´ ====================

@bot.command(name="–±–∞–ª–∞–Ω—Å")
async def balance_cmd(ctx, member: discord.Member = None):
    member = member or ctx.author
    balance = balances.get(member.id, 0)
    logging.info(f"*–±–∞–ª–∞–Ω—Å –æ—Ç {ctx.author} ‚Üí {member} = {balance}")
    await ctx.send(f"üí∞ –ë–∞–ª–∞–Ω—Å {member.mention}: **{balance}** –º–æ–Ω–µ—Ç.")


@bot.command(name="givemoney")
@commands.has_permissions(administrator=True)
async def givemoney_cmd(ctx, amount: int, member: discord.Member):
    """–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º (–Ω–µ –Ω–∏–∂–µ 0)."""
    success, total_balance = await change_balance(member, amount)
    if not success:
        await ctx.send(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å {member.mention} –Ω–∏–∂–µ –Ω—É–ª—è! "
                       f"(—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance})")
        return

    if amount > 0:
        await ctx.send(f"‚úÖ {member.mention} –ø–æ–ª—É—á–∏–ª {amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    elif amount < 0:
        await ctx.send(f"‚úÖ –£ {member.mention} —Å–ø–∏—Å–∞–Ω–æ {-amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    else:
        await ctx.send("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 0 –º–æ–Ω–µ—Ç –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.")


@bot.command(name="takemoney")
@commands.has_permissions(administrator=True)
async def takemoney_cmd(ctx, amount: int, member: discord.Member):
    """–£–¥–æ–±–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: *takemoney 50 @user"""
    if amount <= 0:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: *takemoney 50 @user")
        return
    await givemoney_cmd(ctx, -amount, member)


@bot.command(name="cleardb")
@commands.has_permissions(administrator=True)
async def cleardb_cmd(ctx):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É: —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DB-–∫–∞–Ω–∞–ª–µ –∏ —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç—É—é JSON-–±–∞–∑—É."""
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        await ctx.send("‚ùå –ö–∞–Ω–∞–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–∞–∑—ã
    msgs = [m async for m in db_channel.history(limit=None)]
    for m in msgs:
        try:
            await m.delete()
        except Exception:
            pass

    # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é
    balances = {}
    db_message = await db_channel.send(json.dumps({}))
    await ctx.send("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.")


# ==================== –ó–ê–ü–£–°–ö ====================
bot.run(TOKEN)
