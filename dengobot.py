import discord
from discord.ext import commands
import logging
from dotenv import load_dotenv
from datetime import datetime
import os
import json
import random
import asyncio
from flask import Flask
from threading import Thread
from discord.ui import View, Button

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# --- ID –†–û–õ–ò + –ö–ê–ù–ê–õ–û–í ---
ACTIVE_ROLE_ID = 1407089794240090263
LOG_CHANNEL_ID = 1407081468525805748  # –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)
COMMAND_CHANNEL_ID = 1407081468525805748  # –∫–∞–Ω–∞–ª, –≥–¥–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å /give mone
DB_CHANNEL_ID = 1407213722824343602  # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è "–±–∞–∑—ã"
LEADERBOARD_CHANNEL_ID = 1407421547785883749  # –õ–ò–î–ï–†–ë–û–†–î
ORDERS_CHANNEL_ID = 1408282847185338418 # –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–æ–≤

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
intents.voice_states = True
bot = commands.Bot(command_prefix="*", intents=intents)

voice_times = {}  # {member_id: datetime}
balances = {}  # {member_id: int}
db_messages = {}  # {member_id: message_id}
MONEY_PER_MINUTE = 1

# ---------------- WEB-–°–ï–†–í–ï–† –¥–ª—è UptimeRobot ----------------
app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is running!"
def run_web():
    app.run(host="0.0.0.0", port=8080)
def keep_alive():
    t = Thread(target=run_web)
    t.start()

# ==================== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô ====================
async def load_database():
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return
    messages = [m async for m in db_channel.history(limit=None, oldest_first=True)]
    last_valid_msg = None
    last_valid_data = None
    to_delete = []
    for m in messages:
        try:
            data = json.loads(m.content)
            if isinstance(data, dict):
                if last_valid_msg:
                    to_delete.append(last_valid_msg)
                last_valid_msg = m
                last_valid_data = data
            else:
                to_delete.append(m)
        except json.JSONDecodeError:
            to_delete.append(m)
    for m in to_delete:
        try:
            await m.delete()
        except Exception:
            pass
    if last_valid_msg is not None:
        balances = {int(k): int(v) for k, v in last_valid_data.items()}
        db_message = last_valid_msg
        logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(balances)}")
        return
    new_msg = await db_channel.send(json.dumps({}))
    db_message = new_msg
    balances = {}
    logging.info("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã.")

async def save_database():
    global db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return
    if not db_message:
        await load_database()
    if not db_message:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É.")
        return
    payload = {str(k): int(v) for k, v in balances.items()}
    try:
        await db_message.edit(content=json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except discord.NotFound:
        db_message = await db_channel.send(json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ).")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É: {e}")

async def change_balance(member: discord.Member, amount: int):
    old_balance = balances.get(member.id, 0)
    new_balance = old_balance + amount
    if new_balance < 0:
        return False, old_balance
    balances[member.id] = new_balance
    await save_database()
    await update_leaderboard()  # –õ–ò–î–ï–†–ë–û–†–î
    return True, new_balance

# ==================== –õ–ò–î–ï–†–ë–û–†–î ====================
async def update_leaderboard():
    channel = bot.get_channel(LEADERBOARD_CHANNEL_ID)
    if not channel:
        logging.error("LEADERBOARD_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return

    top = sorted(balances.items(), key=lambda x: x[1], reverse=True)
    lines = []
    for i, (user_id, balance) in enumerate(top[:10], start=1):
        member = channel.guild.get_member(user_id)
        name = member.display_name if member else f"User {user_id}"
        lines.append(f"**{i}. {name}** ‚Äî üí∞ {balance} –º–æ–Ω–µ—Ç")
    text = "üèÜ **–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:**\n\n" + "\n".join(lines) if lines else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    async for msg in channel.history(limit=50):
        if msg.author == bot.user:
            await msg.edit(content=text)
            return
    await channel.send(text)

# ==================== –°–û–ë–´–¢–ò–Ø ====================
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    await load_database()
    await update_leaderboard()  # –õ–ò–î–ï–†–ë–û–†–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

@bot.event
async def on_voice_state_update(member, before, after):
    role = member.guild.get_role(ACTIVE_ROLE_ID)
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    command_channel = bot.get_channel(COMMAND_CHANNEL_ID)

    if before.channel is None and after.channel is not None:
        if role and role not in member.roles:
            try:
                await member.add_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å.")
        voice_times[member.id] = datetime.now()
        if log_channel:
            await log_channel.send(f"‚úÖ {member} –∑–∞—à—ë–ª –≤ {after.channel}, —Ä–æ–ª—å –≤—ã–¥–∞–Ω–∞.")
        if command_channel:
            await command_channel.send(f"üéß {member.mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {after.channel.mention}!")
    if before.channel is not None and after.channel is None:
        if role and role in member.roles:
            try:
                await member.remove_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ —Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å.")
        if member.id in voice_times:
            join_time = voice_times.pop(member.id)
            minutes = int((datetime.now() - join_time).total_seconds() // 60)
            if minutes > 0:
                money = minutes * MONEY_PER_MINUTE
                success, total_balance = await change_balance(member, money)
                if success and command_channel:
                    await command_channel.send(
                        f"üí∞ {member.mention}, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{money}** –º–æ–Ω–µ—Ç "
                        f"(–∑–∞ {minutes} –º–∏–Ω). –ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
                if log_channel:
                    await log_channel.send(
                        f"üìà –ù–∞—á–∏—Å–ª–µ–Ω–æ {minutes}√ó{MONEY_PER_MINUTE} = **{money}** –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}. "
                        f"–ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
            else:
                if command_channel:
                    await command_channel.send(
                        f"‚ö†Ô∏è {member.mention}, –±—ã–ª –≤ –≤–æ–π—Å–µ <1 –º–∏–Ω. –ú–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã."
                    )
                if log_channel:
                    await log_channel.send(
                        f"‚ÑπÔ∏è {member} –≤—ã—à–µ–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (<1 –º–∏–Ω—É—Ç—ã). –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ—Ç."
                    )

# ==================== –ö–û–ú–ê–ù–î–´ ====================
@bot.command(name="–±–∞–ª–∞–Ω—Å")
async def balance(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author

    bal = balances.get(member.id, 0)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    msg = await ctx.send(f"\U0001F4B0 –ë–∞–ª–∞–Ω—Å {member.display_name}: {bal} –º–æ–Ω–µ—Ç")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    await msg.delete(delay=15)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    try:
        await ctx.message.delete(delay=15)
    except discord.Forbidden:
        pass  # –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.command(name="givemoney")
@commands.has_permissions(administrator=True)
async def givemoney_cmd(ctx, amount: int, member: discord.Member):
    success, total_balance = await change_balance(member, amount)
    if not success:
        await ctx.send(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å {member.mention} –Ω–∏–∂–µ –Ω—É–ª—è! "
                       f"(—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance})")
        return
    if amount > 0:
        await ctx.send(f"‚úÖ {member.mention} –ø–æ–ª—É—á–∏–ª {amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    elif amount < 0:
        await ctx.send(f"‚úÖ –£ {member.mention} —Å–ø–∏—Å–∞–Ω–æ {-amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    else:
        await ctx.send("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 0 –º–æ–Ω–µ—Ç –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.")

@bot.command(name="takemoney")
@commands.has_permissions(administrator=True)
async def takemoney_cmd(ctx, amount: int, member: discord.Member):
    if amount <= 0:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: *takemoney 50 @user")
        return
    await givemoney_cmd(ctx, -amount, member)

@bot.command(name="cleardb")
@commands.has_permissions(administrator=True)
async def cleardb_cmd(ctx):
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        await ctx.send("‚ùå –ö–∞–Ω–∞–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    msgs = [m async for m in db_channel.history(limit=None)]
    for m in msgs:
        try:
            await m.delete()
        except Exception:
            pass
    balances = {}
    db_message = await db_channel.send(json.dumps({}))
    await ctx.send("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.")

# ==================== –ë–ê–¢–õ–´ ====================
active_battles = {}
JUDGE_ROLE_ID = 1407534809034784879

def generate_battle_id(members):
    return "_".join(str(m.id) for m in members)

@bot.command(name="–±–∞—Ç–ª1")
async def battle1_cmd(ctx, *members: discord.Member):
    if not members:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 1.")
        return

    battle_id = generate_battle_id(members)
    if battle_id in active_battles:
        await ctx.send(f"‚ö†Ô∏è –ë–∞—Ç–ª —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {battle_id}")
        return

    active_battles[battle_id] = {"team1": list(members), "team2": []}
    team_list = ", ".join(m.mention for m in members)
    await ctx.send(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ 1 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. ID –±–∞—Ç–ª–∞: {battle_id}\nüë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã 1: {team_list}")

@bot.command(name="–±–∞—Ç–ª2")
async def battle2_cmd(ctx, battle_id: str, *members: discord.Member):
    if battle_id not in active_battles:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –±–∞—Ç–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if not members:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 2.")
        return

    if active_battles[battle_id]["team2"]:
        await ctx.send("‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –±–∞—Ç–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 2 —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    active_battles[battle_id]["team2"] = list(members)
    team_list = ", ".join(m.mention for m in members)
    await ctx.send(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ 2 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–∞—Ç–ª–∞ {battle_id}.\nüë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã 2: {team_list}")

@bot.command(name="–±–∞—Ç–ª_–æ—Ç–º–µ–Ω–∞")
async def cancel_battle_cmd(ctx, battle_id: str):
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –±–∞—Ç–ª—ã.")
        return

    if battle_id not in active_battles:
        await ctx.send("‚ö†Ô∏è –ë–∞—Ç–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del active_battles[battle_id]
    await ctx.send(f"üõë –ë–∞—Ç–ª {battle_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω —Å—É–¥—å—ë–π {ctx.author.mention}.")

@bot.command(name="–ø–æ–±–µ–¥–∞")
async def victory_cmd(ctx, battle_id: str, winner: str):
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –±–∞—Ç–ª—ã.")
        return

    if battle_id not in active_battles:
        await ctx.send("‚ö†Ô∏è –ë–∞—Ç–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    battle = active_battles[battle_id]
    team1 = battle["team1"]
    team2 = battle["team2"]

    if not team1 or not team2:
        await ctx.send("‚ö†Ô∏è –û–±–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if winner.lower() == "–±–∞—Ç–ª1":
        winners, losers = team1, team2
    elif winner.lower() == "–±–∞—Ç–ª2":
        winners, losers = team2, team1
    else:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: –±–∞—Ç–ª1 –∏–ª–∏ –±–∞—Ç–ª2.")
        return

    total_bank = 0
    # –° –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ —Å–Ω–∏–º–∞–µ–º 50% –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    for m in losers:
        bal = balances.get(m.id, 0)
        penalty = bal // 2
        balances[m.id] = bal - penalty
        total_bank += penalty
        await save_database()

    # –î–µ–ª–∏–º –±–∞–Ω–∫ –º–µ–∂–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
    reward_each = total_bank // len(winners)
    for m in winners:
        balances[m.id] = balances.get(m.id, 0) + reward_each
        await save_database()

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    winners_list = ", ".join(m.mention for m in winners)
    losers_list = ", ".join(m.mention for m in losers)
    await ctx.send(
        f"‚úÖ –ë–∞—Ç–ª {battle_id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ ({winner}): {winners_list} (+{reward_each} –º–æ–Ω–µ—Ç –∫–∞–∂–¥–æ–º—É)\n"
        f"üíÄ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: {losers_list} (–º–∏–Ω—É—Å 50% –±–∞–ª–∞–Ω—Å–∞)\n"
        f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫: {total_bank} –º–æ–Ω–µ—Ç"
    )

    # –£–¥–∞–ª—è–µ–º –±–∞—Ç–ª
    del active_battles[battle_id]

from discord.ui import View, Button

# ==================== –ë–ê–¢–õ–´ –° –ú–ï–°–¢–ê–ú–ò (–ø–ª—é—Å/–º–∏–Ω—É—Å) ====================
active_battles_places = {}

@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞")
async def create_battle_places(ctx, battle_id: str):
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –±–∞—Ç–ª—ã.")
        return

    if battle_id in active_battles_places:
        await ctx.send(f"‚ö†Ô∏è –ë–∞—Ç–ª —Å ID {battle_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    active_battles_places[battle_id] = {"teams": {}}
    await ctx.send(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–∞—Ç–ª —Å –º–µ—Å—Ç–∞–º–∏. ID: {battle_id}")


# --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è/–≤—ã—Ö–æ–¥–∞ ---
class JoinTeamButton(View):
    def __init__(self, battle_id, team_number):
        super().__init__(timeout=None)
        self.battle_id = battle_id
        self.team_number = team_number

    @discord.ui.button(label="–í—Å—Ç—É–ø–∏—Ç—å", style=discord.ButtonStyle.green)
    async def join(self, interaction: discord.Interaction, button: Button):
        team = active_battles_places[self.battle_id]["teams"][self.team_number]
        if interaction.user in team["members"]:
            await interaction.response.send_message("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            return
        team["members"].append(interaction.user)
        await interaction.response.send_message(
            f"‚úÖ {interaction.user.mention} –≤—Å—Ç—É–ø–∏–ª(–∞) –≤ –∫–æ–º–∞–Ω–¥—É {self.team_number} ({self.battle_id})",
            ephemeral=True
        )

    @discord.ui.button(label="–ü–æ–∫–∏–Ω—É—Ç—å", style=discord.ButtonStyle.red)
    async def leave(self, interaction: discord.Interaction, button: Button):
        team = active_battles_places[self.battle_id]["teams"][self.team_number]
        if interaction.user not in team["members"]:
            await interaction.response.send_message("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            return
        team["members"].remove(interaction.user)
        await interaction.response.send_message(
            f"üö™ {interaction.user.mention} –ø–æ–∫–∏–Ω—É–ª(–∞) –∫–æ–º–∞–Ω–¥—É {self.team_number} ({self.battle_id})",
            ephemeral=True
        )


@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞-–∫–æ–º–∞–Ω–¥–∞")
async def add_team_places(ctx, team_number: int, battle_id: str, percent: str):
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
        return

    if battle_id not in active_battles_places:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –±–∞—Ç–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        sign = percent[0]
        value = int(percent[1:].replace("%", ""))
    except:
        await ctx.send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π +N% –∏–ª–∏ -N%.")
        return

    if sign not in ["+", "-"]:
        await ctx.send("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–∫ + –∏–ª–∏ - –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –±—É–¥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    active_battles_places[battle_id]["teams"][team_number] = {
        "members": [],
        "sign": sign,
        "percent": value
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if sign == "+":
        await ctx.send(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_number} (–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏) –¥–ª—è –±–∞—Ç–ª–∞ {battle_id}.\n"
            f"üèÜ –ü–æ–ª—É—á–∞—Ç {value}% –æ—Ç –±–∞–Ω–∫–∞.\nüë• –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏:",
            view=JoinTeamButton(battle_id, team_number)
        )
    else:
        await ctx.send(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_number} (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ) –¥–ª—è –±–∞—Ç–ª–∞ {battle_id}.\n"
            f"üí∏ –ü–æ—Ç–µ—Ä—è—é—Ç {value}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞.\nüë• –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏:",
            view=JoinTeamButton(battle_id, team_number)
        )


@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞-–∫–æ–Ω–µ—Ü")
async def end_battle_places(ctx, battle_id: str):
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –±–∞—Ç–ª—ã.")
        return

    if battle_id not in active_battles_places:
        await ctx.send("‚ö†Ô∏è –ë–∞—Ç–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    battle = active_battles_places[battle_id]
    total_bank = 0
    results = []

    # --- –°–Ω–∏–º–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö ---
    for team_number, team in battle["teams"].items():
        if team["sign"] == "-":
            for member in team["members"]:
                balance = balances.get(member.id, 0)
                take = balance * team["percent"] // 100
                if take > 0:
                    success, new_balance = await change_balance(member, -take)
                    if success:
                        total_bank += take
                        results.append(f"üí∏ {member.mention} –ø–æ—Ç–µ—Ä—è–ª {take} –º–æ–Ω–µ—Ç (–±–∞–ª–∞–Ω—Å {new_balance})")

    # --- –†–∞–∑–¥–∞—ë–º –º–æ–Ω–µ—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º ---
    for team_number, team in battle["teams"].items():
        if team["sign"] == "+" and team["members"]:
            reward_total = total_bank * team["percent"] // 100
            reward_per_member = reward_total // len(team["members"])
            for member in team["members"]:
                if reward_per_member > 0:
                    success, new_balance = await change_balance(member, reward_per_member)
                    if success:
                        results.append(f"üèÜ {member.mention} –ø–æ–ª—É—á–∏–ª {reward_per_member} –º–æ–Ω–µ—Ç (–±–∞–ª–∞–Ω—Å {new_balance})")

    # --- –ò—Ç–æ–≥ ---
    del active_battles_places[battle_id]
    await ctx.send(
        f"‚úÖ –ë–∞—Ç–ª {battle_id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
        f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫: {total_bank}\n\n" +
        ("\n".join(results) if results else "–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.")
    )


# –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
shop_items = [
    {"name": "–ü—Ä–∏–∑—ã–≤ –º–µ–Ω—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞ (–∫–∞–∫ –º–∏–Ω–∏–º—É–º) 5 –º–∏–Ω—É—Ç", "price": 50, "emoji": "üé§"},
    {"name": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–æ–ª—å", "price": 1000, "emoji": "üìú"},
    {"name": "–î–∞—Ç—å —Ä–æ–ª—å –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É", "price": 1500, "emoji": "üêâ"},
    {"name": "–£–±—Ä–∞—Ç—å —á—É–∂—É—é —Ä–æ–ª—å", "price": 500, "emoji": "üò≠"},
    {"name": "–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å", "price": 2500, "emoji": "ü§©"},
    {"name": "–£–±—Ä–∞—Ç—å (–õ–∞–π–∫) ((–û–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≤–∞–π–ø))", "price": 5000, "emoji": "üôè"},
    {"name": "–ü–æ–ø–∞—Å—Ç—å –≤ —Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ", "price": 10000, "emoji": "üèÖ"},
]

@bot.command(name="–º–∞–≥–∞–∑–∏–Ω")
async def shop_cmd(ctx):
    embed = discord.Embed(
        title="üõí –ú–∞–≥–∞–∑–∏–Ω",
        description="–î–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
        color=discord.Color.gold()
    )

    description = ""
    for item in shop_items:
        description += f"{item['emoji']} **{item['name']}** ‚Äî {item['price']} –º–æ–Ω–µ—Ç\n"
    embed.add_field(name="–¢–æ–≤–∞—Ä—ã", value=description, inline=False)

    shop_msg = await ctx.send(embed=embed)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
    for item in shop_items:
        await shop_msg.add_reaction(item['emoji'])
    await shop_msg.add_reaction("‚úÖ")

    def check(reaction, user):
        return (
            user != bot.user
            and reaction.message.id == shop_msg.id
        )

    user_choices = {}

    try:
        while True:
            reaction, user = await bot.wait_for("reaction_add", timeout=3600, check=check)

            if str(reaction.emoji) == "‚úÖ":
                if user.id not in user_choices:
                    await ctx.send(f"‚ö†Ô∏è {user.mention}, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä!")
                    continue

                item = user_choices[user.id]
                price = item["price"]
                bal = balances.get(user.id, 0)

                if bal < price:
                    await ctx.send(f"‚ùå {user.mention}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ **{item['name']}**.")
                    continue

                # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
                balances[user.id] = bal - price
                await save_database()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                order_id = f"N{random.randint(1000, 9999)}"

                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–æ–≤
                orders_channel = bot.get_channel(ORDERS_CHANNEL_ID)
                await orders_channel.send(
                    f"üì¶ –ó–∞–∫–∞–∑ {order_id}\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}\n"
                    f"üõçÔ∏è –¢–æ–≤–∞—Ä: **{item['name']}** ({price} –º–æ–Ω–µ—Ç)"
                )

                # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                confirm_msg = await ctx.send(
                    f"‚úÖ {user.mention}, –∑–∞–∫–∞–∑ {order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                    f"–¢—ã –∫—É–ø–∏–ª **{item['name']}** –∑–∞ {price} –º–æ–Ω–µ—Ç."
                )

            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä
                for item in shop_items:
                    if str(reaction.emoji) == item["emoji"]:
                        user_choices[user.id] = item
                        await ctx.send(f"üõí {user.mention}, –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: **{item['name']}** ({item['price']} –º–æ–Ω–µ—Ç).")
                        break

    except asyncio.TimeoutError:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        try:
            await shop_msg.delete()
        except:
            pass


# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
    bot.run(TOKEN)
