import discord
from discord.ext import commands
import logging
from dotenv import load_dotenv
from datetime import datetime
import os
import json
import random
import asyncio
from flask import Flask
from threading import Thread
from discord.ui import View, Button

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# --- ID –†–û–õ–ò + –ö–ê–ù–ê–õ–û–í ---
ACTIVE_ROLE_ID = 1407089794240090263
LOG_CHANNEL_ID = 1407081468525805748
COMMAND_CHANNEL_ID = 1407081468525805748
DB_CHANNEL_ID = 1407213722824343602
LEADERBOARD_CHANNEL_ID = 1407421547785883749
ORDERS_CHANNEL_ID = 1408282847185338418
JUDGES_CHANNEL_ID = 1408318242916798505
DUELS_CHANNEL_ID = 1409123208543604786  # –ö–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∫–µ—Ç –¥—É—ç–ª–µ–π

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
intents.voice_states = True
bot = commands.Bot(command_prefix="*", intents=intents)

voice_times = {}
balances = {}
db_messages = {}
MONEY_PER_MINUTE = 1
active_duels = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥—É—ç–ª—è—Ö

# ---------------- WEB-–°–ï–†–í–ï–† –¥–ª—è UptimeRobot ----------------
app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is running!"
def run_web():
    app.run(host="0.0.0.0", port=8080)
def keep_alive():
    t = Thread(target=run_web)
    t.start()

# ==================== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô ====================
async def load_database():
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return
    messages = [m async for m in db_channel.history(limit=None, oldest_first=True)]
    last_valid_msg = None
    last_valid_data = None
    to_delete = []
    for m in messages:
        try:
            data = json.loads(m.content)
            if isinstance(data, dict):
                if last_valid_msg:
                    to_delete.append(last_valid_msg)
                last_valid_msg = m
                last_valid_data = data
            else:
                to_delete.append(m)
        except json.JSONDecodeError:
            to_delete.append(m)
    for m in to_delete:
        try:
            await m.delete()
        except Exception:
            pass
    if last_valid_msg is not None:
        balances = {int(k): int(v) for k, v in last_valid_data.items()}
        db_message = last_valid_msg
        logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(balances)}")
        return
    new_msg = await db_channel.send(json.dumps({}))
    db_message = new_msg
    balances = {}
    logging.info("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã.")

async def save_database():
    global db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        logging.error("DB_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return
    if not db_message:
        await load_database()
    if not db_message:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É.")
        return
    payload = {str(k): int(v) for k, v in balances.items()}
    try:
        await db_message.edit(content=json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except discord.NotFound:
        db_message = await db_channel.send(json.dumps(payload, ensure_ascii=False))
        logging.info("–ë–∞–∑–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ).")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É: {e}")

async def change_balance(member: discord.Member, amount: int):
    old_balance = balances.get(member.id, 0)
    new_balance = old_balance + amount
    if new_balance < 0:
        return False, old_balance
    balances[member.id] = new_balance
    await save_database()
    await update_leaderboard()
    return True, new_balance

# ==================== –õ–ò–î–ï–†–ë–û–†–î ====================
async def update_leaderboard():
    channel = bot.get_channel(LEADERBOARD_CHANNEL_ID)
    if not channel:
        logging.error("LEADERBOARD_CHANNEL_ID –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª.")
        return

    top = sorted(balances.items(), key=lambda x: x[1], reverse=True)
    lines = []
    for i, (user_id, balance) in enumerate(top[:10], start=1):
        member = channel.guild.get_member(user_id)
        name = member.display_name if member else f"User {user_id}"
        lines.append(f"**{i}. {name}** ‚Äî üí∞ {balance} –º–æ–Ω–µ—Ç")
    text = "üèÜ **–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:**\n\n" + "\n".join(lines) if lines else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    async for msg in channel.history(limit=50):
        if msg.author == bot.user:
            await msg.edit(content=text)
            return
    await channel.send(text)

# ==================== –°–û–ë–´–¢–ò–Ø ====================
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    await load_database()
    await update_leaderboard()

@bot.event
async def on_voice_state_update(member, before, after):
    role = member.guild.get_role(ACTIVE_ROLE_ID)
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    command_channel = bot.get_channel(COMMAND_CHANNEL_ID)

    if before.channel is None and after.channel is not None:
        if role and role not in member.roles:
            try:
                await member.add_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å.")
        voice_times[member.id] = datetime.now()
        if log_channel:
            await log_channel.send(f"‚úÖ {member} –∑–∞—à—ë–ª –≤ {after.channel}, —Ä–æ–ª—å –≤—ã–¥–∞–Ω–∞.")
        if command_channel:
            await command_channel.send(f"üéß {member.display_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {after.channel.mention}!")
    if before.channel is not None and after.channel is None:
        if role and role in member.roles:
            try:
                await member.remove_roles(role)
            except discord.Forbidden:
                logging.warning("–ù–µ—Ç –ø—Ä–∞–≤ —Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å.")
        if member.id in voice_times:
            join_time = voice_times.pop(member.id)
            minutes = int((datetime.now() - join_time).total_seconds() // 60)
            if minutes > 0:
                money = minutes * MONEY_PER_MINUTE
                success, total_balance = await change_balance(member, money)
                if success and command_channel:
                    await command_channel.send(
                        f"üí∞ {member.display_name}, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{money}** –º–æ–Ω–µ—Ç "
                        f"(–∑–∞ {minutes} –º–∏–Ω). –ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
                if log_channel:
                    await log_channel.send(
                        f"üìà –ù–∞—á–∏—Å–ª–µ–Ω–æ {minutes}√ó{MONEY_PER_MINUTE} = **{money}** –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}. "
                        f"–ë–∞–ª–∞–Ω—Å: **{total_balance}**."
                    )
            else:
                if command_channel:
                    await command_channel.send(
                        f"‚ö†Ô∏è {member.display_name}, –±—ã–ª –≤ –≤–æ–π—Å–µ <1 –º–∏–Ω. –ú–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã."
                    )
                if log_channel:
                    await log_channel.send(
                        f"‚ÑπÔ∏è {member} –≤—ã—à–µ–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (<1 –º–∏–Ω—É—Ç—ã). –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ—Ç."
                    )

# ==================== –ö–û–ú–ê–ù–î–´ ====================
@bot.command(name="–±–∞–ª–∞–Ω—Å")
async def balance(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author

    bal = balances.get(member.id, 0)
    msg = await ctx.send(f"\U0001F4B0 –ë–∞–ª–∞–Ω—Å {member.display_name}: {bal} –º–æ–Ω–µ—Ç")
    await msg.delete(delay=15)
    try:
        await ctx.message.delete(delay=15)
    except discord.Forbidden:
        pass

@bot.command(name="givemoney")
@commands.has_permissions(administrator=True)
async def givemoney_cmd(ctx, amount: int, member: discord.Member):
    success, total_balance = await change_balance(member, amount)
    if not success:
        await ctx.send(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å {member.mention} –Ω–∏–∂–µ –Ω—É–ª—è! "
                       f"(—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance})")
        return
    if amount > 0:
        await ctx.send(f"‚úÖ {member.mention} –ø–æ–ª—É—á–∏–ª {amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    elif amount < 0:
        await ctx.send(f"‚úÖ –£ {member.mention} —Å–ø–∏—Å–∞–Ω–æ {-amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {total_balance}")
    else:
        await ctx.send("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 0 –º–æ–Ω–µ—Ç –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.")

@bot.command(name="takemoney")
@commands.has_permissions(administrator=True)
async def takemoney_cmd(ctx, amount: int, member: discord.Member):
    if amount <= 0:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: *takemoney 50 @user")
        return
    await givemoney_cmd(ctx, -amount, member)

@bot.command(name="cleardb")
@commands.has_permissions(administrator=True)
async def cleardb_cmd(ctx):
    global balances, db_message
    db_channel = bot.get_channel(DB_CHANNEL_ID)
    if not db_channel:
        await ctx.send("‚ùå –ö–∞–Ω–∞–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    msgs = [m async for m in db_channel.history(limit=None)]
    for m in msgs:
        try:
            await m.delete()
        except Exception:
            pass
    balances = {}
    db_message = await db_channel.send(json.dumps({}))
    await ctx.send("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.")

# ==================== –ë–ê–¢–õ–´ –° –ú–ï–°–¢–ê–ú–ò (–ø–ª—é—Å/–º–∏–Ω—É—Å) ====================
active_battles_places = {}

class JoinTeamButton(View):
    def __init__(self, battle_id, team_number):
        super().__init__(timeout=None)
        self.battle_id = battle_id
        self.team_number = team_number

    @discord.ui.button(label="–í—Å—Ç—É–ø–∏—Ç—å", style=discord.ButtonStyle.green)
    async def join(self, interaction: discord.Interaction, button: Button):
        team = active_battles_places[self.battle_id]["teams"][self.team_number]
        if interaction.user in team["members"]:
            await interaction.response.send_message("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            return
        team["members"].append(interaction.user)
        await interaction.response.send_message(
            f"‚úÖ {interaction.user.mention} –≤—Å—Ç—É–ø–∏–ª(–∞) –≤ –∫–æ–º–∞–Ω–¥—É {self.team_number} ({self.battle_id})",
            ephemeral=True
        )

    @discord.ui.button(label="–ü–æ–∫–∏–Ω—É—Ç—å", style=discord.ButtonStyle.red)
    async def leave(self, interaction: discord.Interaction, button: Button):
        team = active_battles_places[self.battle_id]["teams"][self.team_number]
        if interaction.user not in team["members"]:
            await interaction.response.send_message("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            return
        team["members"].remove(interaction.user)
        await interaction.response.send_message(
            f"üö™ {interaction.user.mention} –ø–æ–∫–∏–Ω—É–ª(–∞) –∫–æ–º–∞–Ω–¥—É {self.team_number} ({self.battle_id})",
            ephemeral=True
        )

@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞")
async def create_battle_places(ctx, battle_id: str):
    JUDGE_ROLE_ID = 1407534809034784879
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –±–∞—Ç–ª—ã.")
        return

    if battle_id in active_battles_places:
        await ctx.send(f"‚ö†Ô∏è –ë–∞—Ç–ª —Å ID {battle_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    active_battles_places[battle_id] = {"teams": {}}
    await ctx.send(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–∞—Ç–ª —Å –º–µ—Å—Ç–∞–º–∏. ID: {battle_id}")

@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞-–∫–æ–º–∞–Ω–¥–∞")
async def add_team_places(ctx, team_number: int, battle_id: str, percent: str):
    JUDGE_ROLE_ID = 1407534809034784879
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
        return

    if battle_id not in active_battles_places:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –±–∞—Ç–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        sign = percent[0]
        value = int(percent[1:].replace("%", ""))
    except:
        await ctx.send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π +N% –∏–ª–∏ -N%.")
        return

    if sign not in ["+", "-"]:
        await ctx.send("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–∫ + –∏–ª–∏ - –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.")
        return

    active_battles_places[battle_id]["teams"][team_number] = {
        "members": [],
        "sign": sign,
        "percent": value
    }

    if sign == "+":
        await ctx.send(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_number} (–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏) –¥–ª—è –±–∞—Ç–ª–∞ {battle_id}.\n"
            f"üèÜ –ü–æ–ª—É—á–∞—Ç {value}% –æ—Ç –±–∞–Ω–∫–∞.\nüë• –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏:",
            view=JoinTeamButton(battle_id, team_number)
        )
    else:
        await ctx.send(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_number} (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ) –¥–ª—è –±–∞—Ç–ª–∞ {battle_id}.\n"
            f"üí∏ –ü–æ—Ç–µ—Ä—è—é—Ç {value}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞.\nüë• –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏:",
            view=JoinTeamButton(battle_id, team_number)
        )

@bot.command(name="–±–∞—Ç–ª-–º–µ—Å—Ç–∞-–∫–æ–Ω–µ—Ü")
async def end_battle_places(ctx, battle_id: str):
    JUDGE_ROLE_ID = 1407534809034784879
    judge_role = ctx.guild.get_role(JUDGE_ROLE_ID)
    if judge_role not in ctx.author.roles:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –°—É–¥—å—è –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –±–∞—Ç–ª—ã.")
        return

    if battle_id not in active_battles_places:
        await ctx.send("‚ö†Ô∏è –ë–∞—Ç–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    battle = active_battles_places[battle_id]
    total_bank = 0
    results = []

    for team_number, team in battle["teams"].items():
        if team["sign"] == "-":
            for member in team["members"]:
                balance_val = balances.get(member.id, 0)
                take = balance_val * team["percent"] // 100
                if take > 0:
                    success, new_balance = await change_balance(member, -take)
                    if success:
                        total_bank += take
                        results.append(f"üí∏ {member.mention} –ø–æ—Ç–µ—Ä—è–ª {take} –º–æ–Ω–µ—Ç (–±–∞–ª–∞–Ω—Å {new_balance})")

    for team_number, team in battle["teams"].items():
        if team["sign"] == "+" and team["members"]:
            reward_total = total_bank * team["percent"] // 100
            reward_per_member = reward_total // len(team["members"])
            for member in team["members"]:
                if reward_per_member > 0:
                    success, new_balance = await change_balance(member, reward_per_member)
                    if success:
                        results.append(f"üèÜ {member.mention} –ø–æ–ª—É—á–∏–ª {reward_per_member} –º–æ–Ω–µ—Ç (–±–∞–ª–∞–Ω—Å {new_balance})")

    del active_battles_places[battle_id]
    await ctx.send(
        f"‚úÖ –ë–∞—Ç–ª {battle_id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
        f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫: {total_bank}\n\n" +
        ("\n".join(results) if results else "–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.")
    )

# ==================== –î–£–≠–õ–ò –ò –°–¢–ê–í–ö–ò ====================
active_duels = {}
active_bets = {}  # {duel_id: {"author": {user_id: amount}, "opponent": {user_id: amount}}}

class AcceptDuelView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=None)
        self.duel_id = duel_id

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.green)
    async def accept_duel(self, interaction: discord.Interaction, button: Button):
        duel = active_duels.get(self.duel_id)
        if not duel:
            await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)
            return
        
        if interaction.user.id == duel["author"].id:
            await interaction.response.send_message("–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –¥—É—ç–ª—å!", ephemeral=True)
            return
        
        if duel["accepted_by"]:
            await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", ephemeral=True)
            return

        duel["accepted_by"] = interaction.user
        thread = await interaction.message.create_thread(name=f"–î—É—ç–ª—å {duel['author'].display_name} vs {interaction.user.display_name}")
        duel["thread"] = thread
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –¥—É—ç–ª–∏
        active_bets[self.duel_id] = {"author": {}, "opponent": {}}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏
        embed = discord.Embed(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥—É—ç–ª–∏",
            description="–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
            color=discord.Color.blue()
        )
        vote_message = await thread.send(embed=embed, view=VoteWinnerView(self.duel_id))
        duel["vote_message"] = vote_message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–¥–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        judges_channel = bot.get_channel(JUDGES_CHANNEL_ID)
        if judges_channel:
            embed = discord.Embed(
                title="–ù–æ–≤–∞—è –¥—É—ç–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—É–¥—å—é",
                description=f"–î—É—ç–ª—å –º–µ–∂–¥—É {duel['author'].mention} –∏ {interaction.user.mention}",
                color=discord.Color.gold()
            )
            embed.add_field(name="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", value=duel["discipline"])
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=duel["description"])
            embed.set_footer(text=f"ID –¥—É—ç–ª–∏: {self.duel_id}")
            judge_message = await judges_channel.send(embed=embed, view=TakeDuelView(self.duel_id))
            duel["judge_message"] = judge_message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É–¥–µ–π

        await interaction.response.send_message(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –¥—É—ç–ª—å! –û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ {thread.mention}.", ephemeral=True)
        await interaction.message.edit(view=None)

class TakeDuelView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=None)
        self.duel_id = duel_id

    @discord.ui.button(label="–í–∑—è—Ç—å—Å—è –∑–∞ –¥—É—ç–ª—å", style=discord.ButtonStyle.blurple)
    async def take_duel(self, interaction: discord.Interaction, button: Button):
        JUDGE_ROLE_ID = 1407534809034784879
        judge_role = interaction.guild.get_role(JUDGE_ROLE_ID)
        if judge_role not in interaction.user.roles:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –±—Ä–∞—Ç—å—Å—è –∑–∞ –¥—É—ç–ª–∏.", ephemeral=True)
            return

        duel = active_duels.get(self.duel_id)
        if not duel:
            await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        duel["judge"] = interaction.user
        await interaction.response.send_message(f"–í—ã –≤–∑—è–ª–∏—Å—å —Å—É–¥–∏—Ç—å —ç—Ç—É –¥—É—ç–ª—å!", ephemeral=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É–¥–µ–π
        if duel.get("judge_message"):
            embed = duel["judge_message"].embeds[0]
            embed.description = f"–î—É—ç–ª—å –º–µ–∂–¥—É {duel['author'].mention} –∏ {duel['accepted_by'].mention}\n–°—É–¥—å—è: {interaction.user.mention}"
            await duel["judge_message"].edit(embed=embed, view=None)
        
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–∞ —É–∂–µ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—É–¥—å–µ
        if duel.get("votes_split", False) and duel.get("thread"):
            embed = discord.Embed(
                title="–ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏",
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥—É—ç–ª–∏",
                color=discord.Color.orange()
            )
            await duel["thread"].send(embed=embed, view=JudgeDecisionView(self.duel_id))

class VoteWinnerView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=None)
        self.duel_id = duel_id
        self.votes = {}
        self.voted_users = set()

    @discord.ui.button(label="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def vote_author(self, interaction: discord.Interaction, button: Button):
        await self.process_vote(interaction, "author")

    @discord.ui.button(label="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø–ø–æ–Ω–µ–Ω—Ç", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def vote_opponent(self, interaction: discord.Interaction, button: Button):
        await self.process_vote(interaction, "opponent")

    async def process_vote(self, interaction, vote_type):
        duel = active_duels.get(self.duel_id)
        if not duel:
            await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        if interaction.user.id not in [duel["author"].id, duel["accepted_by"].id]:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥—É—ç–ª–∏ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if interaction.user.id in self.voted_users:
            await interaction.response.send_message("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", ephemeral=True)
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
        self.votes[interaction.user.id] = vote_type
        self.voted_users.add(interaction.user.id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_view = VoteWinnerView(self.duel_id)
        new_view.votes = self.votes.copy()
        new_view.voted_users = self.voted_users.copy()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if interaction.user.id in new_view.voted_users:
            # –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö, —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await interaction.response.send_message("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", ephemeral=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–≤–∞ –≥–æ–ª–æ—Å–∞
        if len(self.votes) == 2:
            votes_list = list(self.votes.values())
            if votes_list[0] == votes_list[1]:
                winner_type = votes_list[0]
                if winner_type == "author":
                    winner = duel["author"]
                    loser = duel["accepted_by"]
                else:
                    winner = duel["accepted_by"]
                    loser = duel["author"]

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º 50% –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                loser_balance = balances.get(loser.id, 0)
                amount = loser_balance // 2
                if amount > 0:
                    success, new_balance = await change_balance(winner, amount)
                    if success:
                        await change_balance(loser, -amount)
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
                        await self.process_bets(winner_type, duel, interaction)
                        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                        await interaction.message.edit(view=None)
                        await interaction.followup.send(
                            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention}\n"
                            f"üí∏ –° –±–∞–ª–∞–Ω—Å–∞ {loser.mention} —Å–ø–∏—Å–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å {winner.mention}: {new_balance} –º–æ–Ω–µ—Ç"
                        )
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
                    await self.process_bets(winner_type, duel, interaction)
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                    await interaction.message.edit(view=None)
                    await interaction.followup.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
                
                # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if self.duel_id in active_duels:
                    del active_duels[self.duel_id]
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –¥—É—ç–ª–∏
                if self.duel_id in active_bets:
                    del active_bets[self.duel_id]
            else:
                # –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å - –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ –∏ –∂–¥–µ–º —Å—É–¥—å—é
                duel["votes_split"] = True
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                await interaction.message.edit(view=None)
                await interaction.followup.send("–ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å! –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏.")
                
                # –ï—Å–ª–∏ —Å—É–¥—å—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
                if duel.get("judge") and duel.get("thread"):
                    embed = discord.Embed(
                        title="–ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏",
                        description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥—É—ç–ª–∏",
                        color=discord.Color.orange()
                    )
                    await duel["thread"].send(embed=embed, view=JudgeDecisionView(self.duel_id))
    
    async def process_bets(self, winner_type, duel, interaction):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏"""
        if self.duel_id not in active_bets:
            return
            
        bets = active_bets[self.duel_id]
        total_author_bets = sum(bets["author"].values())
        total_opponent_bets = sum(bets["opponent"].values())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏–≤—à—É—é –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—ã
        winning_side = "author" if winner_type == "author" else "opponent"
        losing_side = "opponent" if winner_type == "author" else "author"
        
        total_winning_bets = sum(bets[winning_side].values())
        total_losing_bets = sum(bets[losing_side].values())
        
        # –û–±—â–∏–π –±–∞–Ω–∫ (–≤—Å–µ —Å—Ç–∞–≤–∫–∏)
        total_bank = total_author_bets + total_opponent_bets
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if total_winning_bets > 0 and total_losing_bets > 0:
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞: –¥–æ–ª—è –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–∞–Ω–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            win_multiplier = total_losing_bets / total_winning_bets
            
            # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è + –¥–æ–ª—è –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–∞–Ω–∫–∞)
            for user_id, amount in bets[winning_side].items():
                win_amount = amount + int(amount * win_multiplier)
                member = interaction.guild.get_member(user_id)
                if member:
                    await change_balance(member, win_amount)
                    try:
                        await member.send(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç –Ω–∞ –¥—É—ç–ª–∏ {self.duel_id} (—Å—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç, –≤—ã–∏–≥—Ä—ã—à: {int(amount * win_multiplier)} –º–æ–Ω–µ—Ç)!")
                    except:
                        pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—É (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫)
        elif total_winning_bets > 0:
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
            for user_id, amount in bets[winning_side].items():
                member = interaction.guild.get_member(user_id)
                if member:
                    await change_balance(member, amount)
                    try:
                        await member.send(f"üí∞ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ {amount} –º–æ–Ω–µ—Ç –Ω–∞ –¥—É—ç–ª–∏ {self.duel_id} (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫).")
                    except:
                        pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ç—Ä–µ–¥
        result_text = [
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ –Ω–∞ –¥—É—ç–ª—å:**",
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winning_side}",
            f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫: {total_bank} –º–æ–Ω–µ—Ç",
            f"üìà –°—Ç–∞–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∞: {total_author_bets} –º–æ–Ω–µ—Ç",
            f"üìà –°—Ç–∞–≤–æ–∫ –Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: {total_opponent_bets} –º–æ–Ω–µ—Ç",
        ]
        
        if total_winning_bets > 0 and total_losing_bets > 0:
            win_multiplier = total_losing_bets / total_winning_bets
            result_text.append(f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞: x{win_multiplier:.2f} (—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è + –≤—ã–∏–≥—Ä—ã—à)")
        elif total_winning_bets > 0:
            result_text.append("üí∞ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫)")
        
        await interaction.followup.send("\n".join(result_text))

class JudgeDecisionView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=None)
        self.duel_id = duel_id

    @discord.ui.button(label="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä", style=discord.ButtonStyle.green)
    async def decide_author(self, interaction: discord.Interaction, button: Button):
        await self.process_decision(interaction, "author")

    @discord.ui.button(label="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø–ø–æ–Ω–µ–Ω—Ç", style=discord.ButtonStyle.green)
    async def decide_opponent(self, interaction: discord.Interaction, button: Button):
        await self.process_decision(interaction, "opponent")

    async def process_decision(self, interaction, decision):
        duel = active_duels.get(self.duel_id)
        if not duel:
            await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–¥—å—è
        JUDGE_ROLE_ID = 1407534809034784879
        judge_role = interaction.guild.get_role(JUDGE_ROLE_ID)
        if judge_role not in interaction.user.roles:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ.", ephemeral=True)
            return

        if not duel.get("judge") or interaction.user.id != duel["judge"].id:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å—É–¥—å—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ.", ephemeral=True)
            return

        if decision == "author":
            winner = duel["author"]
            loser = duel["accepted_by"]
            winner_type = "author"
        else:
            winner = duel["accepted_by"]
            loser = duel["author"]
            winner_type = "opponent"

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º 50% –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        loser_balance = balances.get(loser.id, 0)
        amount = loser_balance // 2
        if amount > 0:
            success, new_balance = await change_balance(winner, amount)
            if success:
                await change_balance(loser, -amount)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
                await self.process_bets(winner_type, duel, interaction)
                await interaction.response.send_message(
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention}\n"
                    f"üí∏ –° –±–∞–ª–∞–Ω—Å–∞ {loser.mention} —Å–ø–∏—Å–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å {winner.mention}: {new_balance} –º–æ–Ω–µ—Ç"
                )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
            await self.process_bets(winner_type, duel, interaction)
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

        # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if self.duel_id in active_duels:
            del active_duels[self.duel_id]
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –¥—É—ç–ª–∏
        if self.duel_id in active_bets:
            del active_bets[self.duel_id]
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await interaction.message.edit(view=None)
    
    async def process_bets(self, winner_type, duel, interaction):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏"""
        if self.duel_id not in active_bets:
            return
            
        bets = active_bets[self.duel_id]
        total_author_bets = sum(bets["author"].values())
        total_opponent_bets = sum(bets["opponent"].values())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏–≤—à—É—é –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—ã
        winning_side = "author" if winner_type == "author" else "opponent"
        losing_side = "opponent" if winner_type == "author" else "author"
        
        total_winning_bets = sum(bets[winning_side].values())
        total_losing_bets = sum(bets[losing_side].values())
        
        # –û–±—â–∏–π –±–∞–Ω–∫ (–≤—Å–µ —Å—Ç–∞–≤–∫–∏)
        total_bank = total_author_bets + total_opponent_bets
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if total_winning_bets > 0 and total_losing_bets > 0:
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞: –¥–æ–ª—è –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–∞–Ω–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            win_multiplier = total_losing_bets / total_winning_bets
            
            # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è + –¥–æ–ª—è –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–∞–Ω–∫–∞)
            for user_id, amount in bets[winning_side].items():
                win_amount = amount + int(amount * win_multiplier)
                member = interaction.guild.get_member(user_id)
                if member:
                    await change_balance(member, win_amount)
                    try:
                        await member.send(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç –Ω–∞ –¥—É—ç–ª–∏ {self.duel_id} (—Å—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç, –≤—ã–∏–≥—Ä—ã—à: {int(amount * win_multiplier)} –º–æ–Ω–µ—Ç)!")
                    except:
                        pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—É (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫)
        elif total_winning_bets > 0:
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
            for user_id, amount in bets[winning_side].items():
                member = interaction.guild.get_member(user_id)
                if member:
                    await change_balance(member, amount)
                    try:
                        await member.send(f"üí∞ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ {amount} –º–æ–Ω–µ—Ç –Ω–∞ –¥—É—ç–ª–∏ {self.duel_id} (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫).")
                    except:
                        pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ç—Ä–µ–¥
        result_text = [
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ –Ω–∞ –¥—É—ç–ª—å:**",
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winning_side}",
            f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫: {total_bank} –º–æ–Ω–µ—Ç",
            f"üìà –°—Ç–∞–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∞: {total_author_bets} –º–æ–Ω–µ—Ç",
            f"üìà –°—Ç–∞–≤–æ–∫ –Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: {total_opponent_bets} –º–æ–Ω–µ—Ç",
        ]
        
        if total_winning_bets > 0 and total_losing_bets > 0:
            win_multiplier = total_losing_bets / total_winning_bets
            result_text.append(f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞: x{win_multiplier:.2f} (—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è + –≤—ã–∏–≥—Ä—ã—à)")
        elif total_winning_bets > 0:
            result_text.append("üí∞ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (–Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫)")
        
        await interaction.followup.send("\n".join(result_text))

@bot.command(name="–¥—É—ç–ª—å")
async def duel_cmd(ctx):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏
    for duel in active_duels.values():
        if duel["author"].id == ctx.author.id:
            await ctx.send("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å!", delete_after=15)
            return

    # –ó–∞–ø—Ä–æ—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    await ctx.send("–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –¥—É—ç–ª–∏:", delete_after=15)
    try:
        discipline_msg = await bot.wait_for(
            'message',
            timeout=60,
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel
        )
        discipline = discipline_msg.content
    except asyncio.TimeoutError:
        await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ!", delete_after=15)
        return

    # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
    await ctx.send("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥—É—ç–ª–∏:", delete_after=15)
    try:
        description_msg = await bot.wait_for(
            'message',
            timeout=60,
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel
        )
        description = description_msg.content
    except asyncio.TimeoutError:
        await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ!", delete_after=15)
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await ctx.message.delete()
        await discipline_msg.delete()
        await description_msg.delete()
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
    duel_id = f"duel_{random.randint(1000, 9999)}"
    active_duels[duel_id] = {
        "author": ctx.author,
        "discipline": discipline,
        "description": description,
        "accepted_by": None,
        "judge": None,
        "thread": None,
        "vote_message": None,
        "judge_message": None,
        "votes_split": False
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –∫–∞–Ω–∞–ª –¥—É—ç–ª–µ–π
    duels_channel = bot.get_channel(DUELS_CHANNEL_ID)
    if duels_channel:
        embed = discord.Embed(
            title="–ù–æ–≤–∞—è –¥—É—ç–ª—å",
            description=f"–ê–≤—Ç–æ—Ä: {ctx.author.mention}",
            color=discord.Color.purple()
        )
        embed.add_field(name="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", value=discipline)
        embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=description)
        embed.set_footer(text=f"ID: {duel_id}")
        await duels_channel.send(embed=embed, view=AcceptDuelView(duel_id))

    await ctx.send("–î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞! –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –¥—É—ç–ª–µ–π.", delete_after=15)

#=========================–°—Ç–∞–≤–∫–∏========================
@bot.command(name="—Å—Ç–∞–≤–∫–∞")
async def bet_cmd(ctx, percent: str, side: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if not percent.endswith('%'):
        await ctx.send("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 10%", delete_after=15)
        return
    
    try:
        percent_value = float(percent[:-1])
        if percent_value <= 0 or percent_value > 100:
            await ctx.send("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 100", delete_after=15)
            return
    except ValueError:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—é—á
    side_lower = side.lower()
    if side_lower == "–∞–≤—Ç–æ—Ä":
        side_key = "author"
    elif side_lower == "–æ–ø–ø–æ–Ω–µ–Ω—Ç":
        side_key = "opponent"
    else:
        await ctx.send("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É: –∞–≤—Ç–æ—Ä –∏–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç", delete_after=15)
        return
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ (—Ç—Ä–µ–¥–µ)
    duel_id = None
    for did, duel in active_duels.items():
        if duel.get("thread") and duel["thread"].id == ctx.channel.id:
            duel_id = did
            break
    
    if not duel_id:
        await ctx.send("–°—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π!", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ (–µ—Å—Ç—å –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
    duel = active_duels[duel_id]
    if not duel["accepted_by"]:
        await ctx.send("–°—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞!", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –¥—É—ç–ª–∏
    if ctx.author.id in [duel["author"].id, duel["accepted_by"].id]:
        await ctx.send("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥—É—ç–ª–∏ –Ω–µ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏!", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É—ç–ª—å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if duel_id not in active_duels:
        await ctx.send("–≠—Ç–∞ –¥—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
    user_balance = balances.get(ctx.author.id, 0)
    bet_amount = int(user_balance * percent_value / 100)
    
    if bet_amount <= 0:
        await ctx.send("–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!", delete_after=15)
        return
    
    if user_balance < bet_amount:
        await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", delete_after=15)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å
    if duel_id in active_bets:
        user_bets = active_bets[duel_id]
        if ctx.author.id in user_bets["author"] or ctx.author.id in user_bets["opponent"]:
            await ctx.send("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å!", delete_after=15)
            return
    
    # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É
    success, new_balance = await change_balance(ctx.author, -bet_amount)
    if not success:
        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!", delete_after=15)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    if duel_id not in active_bets:
        active_bets[duel_id] = {"author": {}, "opponent": {}}
    
    active_bets[duel_id][side_key][ctx.author.id] = bet_amount
    
    await ctx.send(
        f"{ctx.author.mention} –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) {bet_amount} –º–æ–Ω–µ—Ç –Ω–∞ {side_lower}.\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç",
        delete_after=15
    )

# ==================== –ú–ê–ì–ê–ó–ò–ù ====================
shop_items = [
    {"name": "–ü—Ä–∏–∑—ã–≤ –º–µ–Ω—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞ (–∫–∞–∫ –º–∏–Ω–∏–º—É–º) 5 –º–∏–Ω—É—Ç", "price": 50, "emoji": "üé§"},
    {"name": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–æ–ª—å", "price": 1000, "emoji": "üìú"},
    {"name": "–î–∞—Ç—å —Ä–æ–ª—å –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É", "price": 1500, "emoji": "üêâ"},
    {"name": "–£–±—Ä–∞—Ç—å —á—É–∂—É—é —Ä–æ–ª—å", "price": 500, "emoji": "üò≠"},
    {"name": "–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å", "price": 2500, "emoji": "ü§©"},
    {"name": "–£–±—Ä–∞—Ç—å (–õ–∞–π–∫) ((–û–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≤–∞–π–ø))", "price": 5000, "emoji": "üôè"},
    {"name": "–ü–æ–ø–∞—Å—Ç—å –≤ —Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ", "price": 10000, "emoji": "üèÖ"},
]

@bot.command(name="–º–∞–≥–∞–∑–∏–Ω")
@commands.has_permissions(administrator=True)
async def shop_cmd(ctx):
    embed = discord.Embed(
        title="üõí –ú–∞–≥–∞–∑–∏–Ω",
        description="–î–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        color=discord.Color.gold()
    )

    description = ""
    for item in shop_items:
        description += f"{item['emoji']} **{item['name']}** ‚Äî {item['price']} –º–æ–Ω–µ—Ç\n"
    embed.add_field(name="–¢–æ–≤–∞—Ä—ã", value=description, inline=False)

    shop_msg = await ctx.send(embed=embed)

    for item in shop_items:
        await shop_msg.add_reaction(item['emoji'])
    await shop_msg.add_reaction("‚úÖ")

    def check(reaction, user):
        return (
            user != bot.user
            and reaction.message.id == shop_msg.id
        )

    user_choices = {}

    try:
        while True:
            reaction, user = await bot.wait_for("reaction_add", timeout=3600, check=check)

            if str(reaction.emoji) == "‚úÖ":
                if user.id not in user_choices:
                    warn_msg = await ctx.send(f"‚ö†Ô∏è {user.mention}, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä!")
                    await warn_msg.delete(delay=15)
                    continue

                item = user_choices[user.id]
                price = item["price"]
                bal = balances.get(user.id, 0)

                if bal < price:
                    error_msg = await ctx.send(f"‚ùå {user.mention}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ **{item['name']}**.")
                    await error_msg.delete(delay=15)
                    continue

                balances[user.id] = bal - price
                await save_database()

                order_id = f"N{random.randint(1000, 9999)}"
                orders_channel = bot.get_channel(ORDERS_CHANNEL_ID)
                await orders_channel.send(
                    f"üì¶ –ó–∞–∫–∞–∑ {order_id}\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}\n"
                    f"üõçÔ∏è –¢–æ–≤–∞—Ä: **{item['name']}** ({price} –º–æ–Ω–µ—Ç)"
                )

                confirm_msg = await ctx.send(
                    f"‚úÖ {user.mention}, –∑–∞–∫–∞–∑ {order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                    f"–¢—ã –∫—É–ø–∏–ª **{item['name']}** –∑–∞ {price} –º–æ–Ω–µ—Ç."
                )
                await confirm_msg.delete(delay=15)

            else:
                for item in shop_items:
                    if str(reaction.emoji) == item["emoji"]:
                        user_choices[user.id] = item
                        choice_msg = await ctx.send(
                            f"üõí {user.mention}, –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: **{item['name']}** ({item['price']} –º–æ–Ω–µ—Ç)."
                        )
                        await choice_msg.delete(delay=15)
                        break
    except asyncio.TimeoutError:
        pass

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    keep_alive()
    bot.run(TOKEN)
